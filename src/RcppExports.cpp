// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "glidars_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// logPL_C
double logPL_C(const MatrixXd& X, const MatrixXd& indset, const VectorXd& cen, const VectorXd& beta);
RcppExport SEXP _glidars_logPL_C(SEXP XSEXP, SEXP indsetSEXP, SEXP cenSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type indset(indsetSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cen(cenSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(logPL_C(X, indset, cen, beta));
    return rcpp_result_gen;
END_RCPP
}
// val_pen
double val_pen(const MatrixXd Apo, const VectorXd& w, const int nb, const int m, const VectorXd beta);
RcppExport SEXP _glidars_val_pen(SEXP ApoSEXP, SEXP wSEXP, SEXP nbSEXP, SEXP mSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd >::type Apo(ApoSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(val_pen(Apo, w, nb, m, beta));
    return rcpp_result_gen;
END_RCPP
}
// roundvec
VectorXd roundvec(const VectorXd& beta, const double eps);
RcppExport SEXP _glidars_roundvec(SEXP betaSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(roundvec(beta, eps));
    return rcpp_result_gen;
END_RCPP
}
// lasso_tree_single
VectorXd lasso_tree_single(const MatrixXd& X, const MatrixXd& indset, const MatrixXd& Apo, const int nb, const int m, const VectorXd& cen, const double lambda, const VectorXd& w, const VectorXd& inibeta, const int maxiter, const double eps, const bool trace, const bool fullA);
RcppExport SEXP _glidars_lasso_tree_single(SEXP XSEXP, SEXP indsetSEXP, SEXP ApoSEXP, SEXP nbSEXP, SEXP mSEXP, SEXP cenSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP inibetaSEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP traceSEXP, SEXP fullASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type indset(indsetSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Apo(ApoSEXP);
    Rcpp::traits::input_parameter< const int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cen(cenSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type inibeta(inibetaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< const bool >::type fullA(fullASEXP);
    rcpp_result_gen = Rcpp::wrap(lasso_tree_single(X, indset, Apo, nb, m, cen, lambda, w, inibeta, maxiter, eps, trace, fullA));
    return rcpp_result_gen;
END_RCPP
}
// lasso_tree_multi
MatrixXd lasso_tree_multi(const MatrixXd& X, const MatrixXd& indset, const MatrixXd& Apo, const int nb, const int m, const VectorXd& cen, const VectorXd& lambda, const VectorXd& w, const VectorXd& inibeta, const int maxiter, const double eps, const bool trace);
RcppExport SEXP _glidars_lasso_tree_multi(SEXP XSEXP, SEXP indsetSEXP, SEXP ApoSEXP, SEXP nbSEXP, SEXP mSEXP, SEXP cenSEXP, SEXP lambdaSEXP, SEXP wSEXP, SEXP inibetaSEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type indset(indsetSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type Apo(ApoSEXP);
    Rcpp::traits::input_parameter< const int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type cen(cenSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type inibeta(inibetaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(lasso_tree_multi(X, indset, Apo, nb, m, cen, lambda, w, inibeta, maxiter, eps, trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glidars_logPL_C", (DL_FUNC) &_glidars_logPL_C, 4},
    {"_glidars_val_pen", (DL_FUNC) &_glidars_val_pen, 5},
    {"_glidars_roundvec", (DL_FUNC) &_glidars_roundvec, 2},
    {"_glidars_lasso_tree_single", (DL_FUNC) &_glidars_lasso_tree_single, 13},
    {"_glidars_lasso_tree_multi", (DL_FUNC) &_glidars_lasso_tree_multi, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_glidars(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
